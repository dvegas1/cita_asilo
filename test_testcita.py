# Generated by Selenium IDE
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
import datetime
import os

class TestTestcita():
  
    
#actions
#1:Solicitar Cita
#2:Consultar Citas Confirmadas
#3:Anular Cita
#4:Salir

#option doc
#1:N.I.E.
#2:D.N.I.
#3:PASAPORTE


#TypePayment
#1:Paypal
#2:usdt

    dat = {'provinciaGeneral':'Madrid','sede':'Cualquier oficina','tramite_oficina':'Despliegue para ver trámites disponibles en esta provincia','tramite_cuperto_policial':'ASILO - PRIMERA CITA-provincia de Madrid','typeDoc':3,'doc':'19445454545','name':'DARWIN VEGAS','birth':'1990','pais':'VENEZUELA','action':1,'payment':False,'TypePayment':1,'reference_payment':'','sucess':False}
   
    dat_user = {}
    
    countrys= [
            'AFGANISTAN',
            'ALBANIA',
            'ALEMANIA',
            'ANDORRA',
            'ANGOLA',
            'ANGUILLA',
            'ANTIGUA Y BARBUDA',
            'ANTILLAS NL.',
            'APATRIDA',
            'ARABIA SAUDI',
            'ARGELIA',
            'ARGENTINA',
            'ARMENIA',
            'ARUBA',
            'AUSTRALIA',
            'AUSTRIA',
            'AZERBAYAN',
            'BAHAMAS',
            'BAHREIN',
            'BANGLADESH',
            'BARBADOS',
            'BELGICA',
            'BELICE',
            'BENIN',
            'BHUTAN',
            'BIELORRUSIA O BELARUS',
            'BOLIVIA',
            'BOSNIA-HERZEGOVINA',
            'BOTSWANA',
            'BRASIL',
            'BRUNEI DARUSSALAM',
            'BULGARIA',
            'BURKINA FASO',
            'BURUNDI',
            'CABO VERDE',
            'CAMBOYA',
            'CAMERUN',
            'CANADA',
            'CENTROAFRICA REPUBLICA',
            'CHAD',
            'CHILE',
            'CHINA',
            'CHIPRE',
            'COLOMBIA',
            'COMORES',
            'CONGO BRAZZAVILLE',
            'COREA, REP. POP. DEMOC.',
            'COREA, REPUBLICA',
            'COSTA DE MARFIL',
            'COSTA RICA',
            'CROACIA',
            'CUBA',
            'DINAMARCA',
            'DJIBOUTI',
            'DOMINICA',
            'DOMINICANA REPUBLICA',
            'ECUADOR',
            'EEUU',
            'EGIPTO',
            'EL SALVADOR',
            'EL VATICANO',
            'EMIRATOS ARABES UNIDOS',
            'ERITREA',
            'ESLOVAQUIA',
            'ESLOVENIA',
            'ESPAÑA',
            'ESTONIA',
            'ETIOPIA',
            'FIDJI',
            'FILIPINAS',
            'FINLANDIA',
            'FRANCIA',
            'GABON',
            'GAMBIA',
            'GEORGIA',
            'GHANA',
            'GRANADA REPUBLICA',
            'GRECIA',
            'GUATEMALA',
            'GUAYANA',
            'GUINEA ECUATORIAL',
            'GUINEA REPUBLICA',
            'GUINEA-BISSAU',
            'HAITI',
            'HOLANDA',
            'HONDURAS',
            'HUNGRIA',
            'INDIA',
            'INDONESIA',
            'IRAK',
            'IRAN',
            'IRLANDA',
            'ISLANDIA',
            'ISLAS MARSCHALL',
            'ISRAEL',
            'ITALIA',
            'JAMAICA',
            'JAPON',
            'JORDANIA',
            'KAZAJSTAN',
            'KENIA',
            'KIRGUISTAN',
            'KIRIBATI',
            'KUWAIT',
            'LAOS',
            'LAS MALDIVAS',
            'LESOTHO',
            'LETONIA',
            'LIBANO',
            'LIBERIA',
            'LIBIA',
            'LIECHTENSTEIN',
            'LITUANIA',
            'LUXEMBURGO',
            'MACAO',
            'MACEDONIA',
            'MADAGASCAR',
            'MALASIA',
            'MALASIA - GRAN BRETAÑA',
            'MALAWI',
            'MALI',
            'MALTA',
            'MARRUECOS',
            'MAURICIO',
            'MAURITANIA',
            'MEJICO',
            'MICRONESIA',
            'MOLDAVIA',
            'MONACO',
            'MONGOLIA',
            'MONTENEGRO',
            'MOZAMBIQUE',
            'MYANMAR',
            'NAMIBIA',
            'NAURU',
            'NEPAL',
            'NICARAGUA',
            'NIGER',
            'NIGERIA',
            'NORUEGA',
            'NUEVA ZELANDA',
            'OMAN',
            'PAKISTAN',
            'PALESTINA EONU',
            'PANAMA',
            'PAPUA NUEVA GUINEA',
            'PARAGUAY',
            'PERU',
            'POLONIA',
            'PORTUGAL',
            'PUERTO RICO',
            'QATAR',
            'REINO UNIDO',
            'REP. DEMOCRATICA DEL CONGO (EX-ZAIRE)',
            'REPUBLICA CHECA',
            'REUNION-COMO',
            'RUANDA',
            'RUMANIA',
            'RUSIA',
            'SALOMON',
            'SAMOA OCCIDENTAL',
            'SAN CRISTOBAL Y NEVIS',
            'SAN MARINO',
            'SAN VICENTE',
            'SANTA LUCIA',
            'SANTO TOME Y PRINCIPE',
            'SEICHELLES',
            'SENEGAL',
            'SENEGAMBIA',
            'SERBIA',
            'SIERRA LEONA',
            'SINGAPUR',
            'SIRIA',
            'SOMALIA',
            'SRI LANKA',
            'SUDAFRICA',
            'SUDAN',
            'SUECIA',
            'SUIZA',
            'SURINAM',
            'SWAZILANDIA',
            'TADJIKISTAN',
            'TAIWAN',
            'TANZANIA',
            'THAILANDIA',
            'TIMOR ORIENTAL',
            'TOGO',
            'TONGA',
            'TRINIDAD Y TOBAGO',
            'TUNEZ',
            'TURKMENIA',
            'TURQUIA',
            'TUVALU',
            'UCRANIA',
            'UGANDA',
            'URUGUAY',
            'UZBEKISTAN',
            'VANUATU',
            'VENEZUELA',
            'VIETNAM',
            'YEMEN',
            'ZAMBIA',
            'ZIMBABWE']
    
    provinces = ['ACoruña',
                  'Albacete',
                  'Alicante',
                  'Almería',
                  'Araba',
                  'Asturias',
                  'Ávila',
                  'Badajoz',
                  'Barcelona',
                  'Bizkaia',
                  'Burgos',
                  'Cáceres',
                  'Cádiz',
                  'Cantabria',
                  'Castellón',
                  'Ceuta',
                  'CiudadReal',
                  'Córdoba',
                  'Cuenca',
                  'Gipuzkoa',
                  'Girona',
                  'Granada',
                  'Guadalajara',
                  'Huelva',
                  'Huesca',
                  'IllesBalears',
                  'Jaén',
                  'LaRioja',
                  'LasPalmas',
                  'León',
                  'Lleida',
                  'Lugo',
                  'Madrid',
                  'Málaga',
                  'Melilla',
                  'Murcia',
                  'Navarra',
                  'Ourense',
                  'Palencia',
                  'Pontevedra',
                  'Salamanca',
                  'S.CruzTenerife',
                  'Segovia',
                  'Sevilla',
                  'Soria',
                  'Tarragona',
                  'Teruel',
                  'Toledo',
                  'Valencia',
                  'Valladolid',
                  'Zamora',
                  'Zaragoza']

    oficines = ['Cualquier oficina',
            'CNP AVDA POBLADOS, Avda. de los Poblados, S/N',
            'CNP Comisaría de Alcalá de Henares, Avda. de Meco, s/n',
            'CNP Comisaría de Alcobendas, Avda. de España, 52',
            'CNP Comisaría de Alcorcón, Alfredo Nobel, 10',
            'CNP Comisaría de Aranjuez, Avda. Príncipe, 40',
            'CNP Comisaría de Arganda del Rey, Av.Mediterraneo(PoliciaLocal), 7',
            'CNP Comisaría de Collado Villalba, SAN FERNANDO, 27',
            'CNP Comisaría de Coslada, Guadalquivir, 16',
            'CNP Comisaría de Fuenlabrada, Calle de los Ángeles, 9',
            'CNP Comisaría de Getafe, Churruca, 6',
            'CNP Comisaría de Leganés, Avda. de Universidad, 27',
            'CNP Comisaría de Majadahonda, Ctra.Villanueva del Pardillo, 3',
            'CNP Comisaría de Móstoles, Granada, 9',
            'CNP Comisaría de Parla, Avda. Juan Carlos I, 2',
            'CNP Comisaría de Pozuelo de Alarcón, Camino de las Huertas, 36',
            'CNP Comisaría de Rivas Vaciamadrid, José Hierro, 82',
            'CNP Comisaría de Torrejón de Ardoz, Hilados, 15',
            'CNP Comisaría de Valdemoro, Avda. de España, 97',
            'CNP OFICINA AQUILES 2, Aquiles, 2',
            'CNP Padre Piquer, Padre Piquer, 18',
            'CNP SANTA ENGRACIA, SANTA ENGRACIA, 18',
            'Comisaría de Getafe 2, churruca, 6',
            'CREADE POZUELO, Paseo de la Casa Campo, 1',
            'García de Paredes, García de Paredes, 65',
            'Leganés, San Nicasio, 31',
            'Oficina de Asilo y Refugio, C/ Pradillo, 40',
            'Silva, Silva, 19']

    tramite_oficine_extrajera = ['Despliegue para ver trámites disponibles en esta provincia',
                             'AUT. RES. TEMPORAL POR CIRCUNSTANCIAS EXCEPCIONALES POR RAZONES HUMANITARIAS, PROTECCIÓN INTERNACIONAL (art. 125) y DISP.',
                             'AUTORIZACIÓN DE RESIDENCIA TEMPORAL POR CIRCUNSTANCIAS EXCEPCIONALES POR ARRAIGO',
                             'AUTORIZACIÓN DE RESIDENCIA Y TRABAJO INICIAL POR CUENTA AJENA',
                             'AUTORIZACIÓN DE RESIDENCIA Y TRABAJO INICIAL POR CUENTA PROPIA',
                             'AUTORIZACIÓN DE TRABAJO PARA ESTUDIANTES',
                             'AUTORIZACIÓN RESIDENCIA TEMPORAL DE MENORES NACIDOS EN ESPAÑA, HIJOS DE EXTRANJEROS RESIDENTES LEGALES',
                             'AUTORIZACIÓN RESIDENCIA TEMPORAL DE MENORES NO NACIDOS EN ESPAÑA, HIJOS DE EXTRANJEROS RESIDENTES LEGALES',
                             'AUTORIZACIÓN RESIDENCIA Y TRABAJO POR CIRCUNSTANCIAS EXCEPCIONALES POR VIOLENCIA DE GÉNERO',
                             'REAGRUPACIÓN FAMILIAR INICIAL',
                             'RECUPERACIÓN DE LA RESIDENCIA DE LARGA DURACIÓN',
                             'TARJETA INICIAL DE RESIDENCIA DE FAMILIAR DE CIUDADANO COMUNITARIO']

    tramite_cuerpo_nacional_policial = ['Despliegue para ver trámites disponibles en esta provincia',
                                    'ASILO - OFICINA DE ASILO Y  REFUGIO. Entrevista Telefónica Trabajador/a  Social. Calle Pradillo',
                                    'ASILO - PRIMERA CITA-provincia de Madrid',
                                    'ASILO-OFIC. DE ASILO Y REFUGIO.EXP/REN TIE Protección Internacional y Documentos Viaje.c/Pradillo 40',
                                    'ASILO-OFICINA DE ASILO Y REFUGIO."nueva normalidad” Expedición/Renovación Documentos.C/ Pradillo 40',
                                    'AUTORIZACIÓN DE REGRESO',
                                    'POLICIA - RECOGIDA DE TARJETA DE IDENTIDAD DE EXTRANJERO (TIE)',
                                    'POLICIA-ASIGNACIÓN DE N.I.E.',
                                    'POLICIA-CARTA DE INVITACIÓN',
                                    'POLICIA-CERTIFICADO DE REGISTRO DE CIUDADANO DE LA U.E.',
                                    'POLICIA-CERTIFICADOS (DE RESIDENCIA, DE NO RESIDENCIA Y DE CONCORDANCIA)',
                                    'POLICIA-INFORMACION DE TRÁMITES DE LA COMISARÍA DE POLICIA',
                                    'POLICIA-TOMA DE HUELLA (EXPEDICIÓN DE TARJETA), RENOVACIÓN DE TARJETA DE LARGA DURACIÓN Y DUPLICADO',
                                    'POLICIA-TOMA DE HUELLA POR IMPOSIBILIDAD DE DESPLAZAMIENTO',
                                    'POLICÍA - CÉDULA DE INSCRIPCIÓN',
                                    'POLICÍA - RECOGIDA DE LA T.I.E. CUYA AUTORIZACIÓN RESUELVE LA DIRECCIÓN GENERAL DE MIGRACIONES',
                                    'POLICÍA TARJETA CONFLICTO UCRANIA–ПОЛІЦІЯ -КАРТКА ДЛЯ ПЕРЕМІЩЕНИХ ОСІБ ВНАСЛІДОК КОНФЛІКТУ В УКРАЇНІ',
                                    'POLICÍA-EXP.TARJETA ASOCIADA AL ACUERDO DE RETIRADA CIUDADANOS BRITÁNICOS Y SUS FAMILIARES (BREXIT)',
                                    'POLICÍA-EXPEDICIÓN DE TARJETAS CUYA AUTORIZACIÓN RESUELVE LA DIRECCIÓN GENERAL DE MIGRACIONES']
    
    parent_dir = "C:\\Users\PC\\Downloads\\citas\\"
    username='584242727712'
    directory_parent_Test = ""
    directory_Test = ""

    def main(self):
        print('')
        #Clock.schedule_interval(self.ejecutar, 300)
        
    def setup_method(self):
        self.current_url = 'https://sede.administracionespublicas.gob.es/pagina/index/directorio/icpplus'
        
        self.valiate_exist_dat()
        valid = self.dat_user['sucess']
        print(f"VALIDATE:{valid}")
        
        if (valid == False):
            print("Por favor validar los datos.")
            return
            
        fecha_y_hora_actual = datetime.datetime.now()
        formato_fecha_y_hora_title = fecha_y_hora_actual.strftime("%d%m%Y %H%M%S").replace(" ", "")

        _path = os.path.join(self.parent_dir, self.username)    
        
        existFolderUser = os.path.exists(_path)

        if(not existFolderUser):
            os.mkdir(_path)
            
        self.directory_parent_Test = _path
            
        _path_Test = os.path.join(self.directory_parent_Test,  formato_fecha_y_hora_title)  
        
        if(not os.path.exists(_path_Test)):
            os.mkdir(_path_Test)
            
        self.directory_Test = _path_Test
       
        formato_fecha_y_hora = fecha_y_hora_actual.strftime("%d/%m/%Y %H:%M:%S")
        
        print("Fecha y hora:", formato_fecha_y_hora)

        self.driver = webdriver.Chrome()
        self.test_testcita()
            
        #finally:
            #self.driver.implicitly_wait(20)
            #elf.teardown_method()

    def teardown_method(self):
        self.driver.quit()
        
    def ifError(self):
        existError = False
        self.driver.implicitly_wait(1)
        try:
            WebDriverWait(self.driver, 2).until(
        EC.element_to_be_clickable((By.ID, "noComplWarning"))
        )
            print("Se encontro la clase:noComplWarning")
            existError=True
        except Exception:
            print("No se encontro la clase:noComplWarning")
        
        try:
            WebDriverWait(self.driver, 2).until(
        EC.element_to_be_clickable((By.CLASS_NAME, "mf-msg__error"))
        )
            print("Se encontro la clase:mf-msg__error")
            existError=True
        except Exception:
            print("No se encontro la clase:mf-msg__error")
                
        try:
            WebDriverWait(self.driver, 2).until(
        EC.element_to_be_clickable((By.CLASS_NAME, "mf-msg__info"))
        )
            existError=True
            print("En este momento no hay citas disponibles,En breve, la Oficina pondrá a su disposición nuevas citas.")
        except Exception:
            print("No se encontro la clase:mf-msg__info")
            
        
        if(existError):
            self.screeShot(False)
            
            
        return existError
         
    def test_testcita(self):
        # Test name: Test cita
        # Step # | name | target | value
        # 1 | open | /pagina/index/directorio/icpplus |
        self.driver.get(self.current_url)
        # 2 | setWindowSize | 1382x744 |
        #self.driver.set_window_size(1382, 744)
        # 3 | runScript | window.scrollTo(0,200) |
        #self.driver.execute_script("window.scrollTo(0,200)")
        # 4 | click | id=submit |

        try:
                WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "submit")))
        except Exception:
            print("- ERROR -- ELEMENTO submit NOT CLICK.")

        self.driver.find_element(By.ID, "submit").click()

        
        print("Seleccionando: PROVINCIAS DISPONIBLES")
        #my_current_url = self.driver.current_url
        # PROVINCIA
        # Por favor, seleccione la provincia donde desea solicitar la cita previa.

        select = Select(self.driver.find_element(By.ID,'form'))
        
        selectProvinceValue = self.dat['provinciaGeneral']
       
        # select la privincia
        select.select_by_visible_text(selectProvinceValue)
        if(not self.ifError()):
           self.screeShot(True)
        #############################################################################################

        # Aceptamos con click en boton para provincia
        try:
                WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "btnAceptar")))
        except Exception:
            print("- ERROR -- ELEMENTO btnAceptar NOT CLICK.")
        self.driver.find_element(By.ID, "btnAceptar").click()
        if(not self.ifError()):
           self.screeShot(True)
        #############################################################################################
        
        # self.driver.execute_script("window.scrollTo(0,600)")

        # SEDE    
        
        select = Select(self.driver.find_element(By.ID,'sede'))
        
        selectSedeValue = self.dat['sede']
            
        select.select_by_visible_text(selectSedeValue)

        #############################################################################################
        
        # TRÁMITES OFICINAS DE EXTRANJERÍA
        
        select = Select(
            self.driver.find_element(By.ID,'tramiteGrupo[0]'))
          
        selectOficineExtranjer = self.dat['tramite_oficina']
        
        select.select_by_visible_text(selectOficineExtranjer)
        
        #############################################################################################
        # TRÁMITES CUERPO NACIONAL DE POLICÍA
        select = Select(
            self.driver.find_element(By.ID,'tramiteGrupo[1]'))
         
        selectOficinePolicial = self.dat['tramite_cuperto_policial']
        
        select.select_by_visible_text(selectOficinePolicial)
        if(not self.ifError()):
           self.screeShot(True)
                
        #############################################################################################

        # Aceptamos
        try:
                WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "btnAceptar")))
        except Exception:
            print("1- ERROR --  ELEMENTO btnAceptar NOT CLICK.")
        self.driver.find_element(By.ID, "btnAceptar").click()
        if(not self.ifError()):
           self.screeShot(True)
        
        # Aceptamos
        try:
                WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "btnEntrar")))
        except Exception:
            print("- ERROR --  ELEMENTO btnEntrar NOT CLICK.")
            
        self.driver.find_element(By.ID, "btnEntrar").click()
        if(not self.ifError()):
           self.screeShot(True)
        
        
        # DATOS PERSONALES -------------
        #Nombre y apellido
        #option doc
        #1:N.I.E.
        #2:D.N.I.
        #3:PASAPORTE
        
        if(self.dat['typeDoc'] == 1):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "rdbTipoDocNie")))
            except Exception:
                print("- ERROR --  rdbTipoDocNie NOT CLICK.")
            self.driver.find_element(By.ID, "rdbTipoDocNie").click()
            
        if(self.dat['typeDoc'] == 2):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "rdbTipoDocDni")))
            except Exception:
                print("- ERROR --  rdbTipoDocDni NOT CLICK.")
            self.driver.find_element(By.ID, "rdbTipoDocDni").click()
            
        if(self.dat['typeDoc'] == 3):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "rdbTipoDocPas")))
            except Exception:
                print("- ERROR --  rdbTipoDocPas NOT CLICK.")
            self.driver.find_element(By.ID, "rdbTipoDocPas").click()
            
            
        inputElement = self.driver.find_element(By.ID,"txtIdCitado")
        inputElement.send_keys(self.dat['doc'])
        
        #Año de nacimiento
        inputElement = self.driver.find_element(By.ID,"txtDesCitado")
        inputElement.send_keys(self.dat['name'])
        
        #País de nacionalidad
        inputElement = self.driver.find_element(By.ID,"txtAnnoCitado")
        inputElement.send_keys(self.dat['birth'])
        
        select = Select(
            self.driver.find_element(By.ID,'txtPaisNac'))
        country = self.dat['pais']
        select.select_by_visible_text(country)
        
        if(not self.ifError()):
           self.screeShot(True)
        
        self.driver.find_element(By.ID, "btnEnviar").click()
        if(not self.ifError()):
           self.screeShot(True)
        
        if(self.dat['action'] == 1):
            # Aceptamos
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "btnEnviar")))
            except Exception:
                print("- ERROR --  ELEMENTO btnEnviar NOT CLICK.")
            self.driver.find_element(By.ID, "btnEnviar").click()
            
            if(not self.ifError()):
                self.screeShot(True)
                
            
        if(self.dat['action'] == 2):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "btnConsultar")))
            except Exception:
                print("- ERROR --  ELEMENTO btnConsultar NOT CLICK.")
            self.driver.find_element(By.ID, "btnConsultar").click()
            if(not self.ifError()):
                self.screeShot(True)
            
        if(self.dat['action'] == 3):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "btnAnular")))
            except Exception:
                print("- ERROR --  ELEMENTO btnAnular NOT CLICK.")
            self.driver.find_element(By.ID, "btnAnular").click()
            if(not self.ifError()):
                self.screeShot(True) 
            
            
        if(self.dat['action'] == 4):
            try:
                    WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "btnSalir")))
            except Exception:
                print("- ERROR --  ELEMENTO btnSalir NOT CLICK.")
            self.driver.find_element(By.ID, "btnSalir").click()
            if(not self.ifError()):
                self.screeShot(True)
            

        # INTERNET CITA PREVIA
        print("Nota: a través de la cumplimentación del siguiente formulario, usted está solicitando cita previa para presentar petición formal de protección internacional.  Para el supuesto de solicitar protección internacional para varias personas pertenecientes al mismo núcleo familiar, se deberá solicitar una única cita.  Advertencia: mediante el envío de esta solicitud el solicitante certifica que los datos aportados son verídicos y que es la persona interesada en la realización de este trámite, no pudiendo, en ningún caso, ser presentada por terceras personas.  A su vez, no serán tenidas en cuenta las solicitudes de aquellas personas a las que ya les haya sido asignada cita en otra provincia distinta a Madrid.  Para la realización del trámite de protección internacional, una vez citado, es necesario la presentación de la siguiente documentación:  Pasaporte original y copia del mismo (página biográfica y todos los sellos de entrada y salida). Fotografía tamaño carné con el fondo blanco. En su caso, documentación que acredite el matrimonio o la ascendencia sobre los hijos. Cualquier otra documentación que pueda acreditar las circunstancias que motivan dicha petición.")
        
        # Aceptamos
        #self.driver.find_element(By.ID, "btnEntrar").click()
        #self.ifError()

    def valiate_exist_dat(self):
        
        
        selectIndex = -1
        sucess=True
        try:
            print("--------------------------")
            print(f"* Buscando Oficina principal:{self.dat['provinciaGeneral']}")
            selectIndex = self.get_indexes(self.dat['provinciaGeneral'], self.provinces)[0]
            print(f"Oficina principal:{self.provinces[selectIndex]}")
            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Oficina principal.")
            print("--------------------------")
            
        try:
            print("--------------------------")
            print(f"* Buscando sede:self.{self.dat['sede']}")
            selectIndex = self.get_indexes(self.dat['sede'], self.oficines)[0]   
            print(f"sede:{self.oficines[selectIndex]}")
            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:sede.")
            print("--------------------------")
            
        try:
            print("--------------------------")
            print(f"* Buscando oficina para tramite:{self.dat['tramite_oficina']}")
            selectIndex = self.get_indexes(self.dat['tramite_oficina'], self.tramite_oficine_extrajera)[0]
            print(f"Oficina para tramite:{self.tramite_oficine_extrajera[selectIndex]}")
            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:oficina para tramite.")
            print("--------------------------")
            
            
        try:
            print("--------------------------")
            print(f"* Validando Nombre y Apellido:{self.dat['name']}")
            if(self.dat['tramite_oficina'] != ''):
                print(f"Nombre y Apellido:{self.dat['name']}")
            else:
                print("- ERROR -- No se encontro:Nombre y apellido.")
                sucess=False

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Nombre y apellido.")
            print("--------------------------")
           
        try:
            print("--------------------------")
            print(f"* Buscando oficina para tramite cuerpo policial:{self.dat['tramite_cuperto_policial']}")
            selectIndex = self.get_indexes(self.dat['tramite_cuperto_policial'], self.tramite_cuerpo_nacional_policial)[0]
            print(f"Oficina para tramite cuerpo policial:{self.tramite_cuerpo_nacional_policial[selectIndex]}")
            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:oficina para tramite cuerpo policial.")
            print("--------------------------")
            
            
        try:
            print("--------------------------")
            print(f"* Validando Nombre y Apellido:{self.dat['name']}")
            if(self.dat['name'] != ''):
                print(f"Nombre y Apellido:{self.dat['name']}")
            else:
                print("- ERROR -- No se encontro:Nombre y apellido.")
                sucess=False

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Nombre y apellido.")
            print("--------------------------")
            
        try:
            print("--------------------------")
            print(f"* Validando Tipo de documento{self.dat['typeDoc']}")
            
            if(self.dat['typeDoc'] == ''):
                print("- ERROR Se debe ingresar un tipo de documento.")
                sucess=False
                
            if(self.dat['typeDoc'] != 1 and self.dat['typeDoc'] != 2 and self.dat['typeDoc'] != 3):
                print(f"El tipo de documento es invalido:{self.dat['typeDoc']}")

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- Tipo de documento es invalido.")
            print("--------------------------")
            
            
        try:
            print("--------------------------")
            print(f"* Validando Nro. de documento:{self.dat['doc']}")
            if(self.dat['doc'] != ''):
                print(f"Nro. de documento:{self.dat['name']}")
            else:
                print("- ERROR -- No se encontro:Nro. de documento.")
                sucess=False

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Nro. de documento.")
            print("--------------------------")
            
        try:
            print("--------------------------")
            print(f"* Validando Fecha de nacimiento:{self.dat['birth']}")
            if(self.dat['birth'] != ''):
                print(f"Fecha de nacimiento:{self.dat['birth']}")
            else:
                print("- ERROR -- No se encontro:Fecha de nacimiento.")
                sucess=False

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Fecha de nacimiento.")
            print("--------------------------")
            
            
        try:
            print("--------------------------")
            print(f"* Buscando Pais:{self.dat['pais']}")
            selectIndex = self.get_indexes(self.dat['pais'], self.countrys)[0]
            print(f"Pais:{self.countrys[selectIndex]}")
            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- No se encontro:Pais.")
            print("--------------------------")
            
            
            
        try:
            print("--------------------------")
            print(f"* Validando Action del usuario:{self.dat['action']}")
            if(self.dat['action'] != ''):
                print(f"Action:{self.dat['action']}")
            else:
                print("- ERROR -- No se encontro:Nro. de documento.")
                sucess=False
                
            if(self.dat['action'] != 1 and self.dat['action'] != 2 and self.dat['action'] != 3):
                print(f"Action Invalidad:{self.dat['action']}")
                sucess=False

            print("--------------------------")
        except Exception:
            sucess=False
            print("- ERROR -- Action Invalidad.")
            print("--------------------------")
            
        
        #Identidad del usuario de cita
    
        self.dat['sucess'] = sucess
        self.dat_user = self.dat
        
        return self.dat_user
        
    def get_indexes(self,x, xs): return [i for (
        y, i) in zip(xs, range(len(xs))) if x == y]
    
    def screeShot(self,sucess):
        _nameMainTitle = ''
        if(sucess):
            _nameMainTitle = '_sucess'
        else:
            _nameMainTitle = '_error'
            
        time.sleep(1)
        fecha_y_hora_actual = datetime.datetime.now()
        formato_fecha_y_hora_title = fecha_y_hora_actual.strftime("%H%M%S")
        
        _img = _nameMainTitle + formato_fecha_y_hora_title + ".png"
        _src = self.directory_Test  + '\\' + _img
        print(f"Print de pantall:{_src}")
        self.driver.save_screenshot(_src)

TestTestcita().setup_method()
